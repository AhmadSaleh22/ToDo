{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { firebase } from '../firebase';\nimport { collatedTasksExist } from '../helpers';\nimport moment from 'moment';\nexport const useTasks = selectedProject => {\n  const [tasks, setTasks] = useState([]);\n  const [archivedTasks, setArchivedTasks] = useState([]);\n  useEffect(() => {\n    let unsubscribe = firebase.firestore().collection('tasks').where('userId', '==', 'ahmadsaleh');\n    unsubscribe = selectedProject && !collatedTasksExist(selectedProject) ? unsubscribe = unsubscribe.where('projectId', '==', selectedProject) : selectedProject === 'TODAY' ? unsubscribe = unsubscribe.where('date', '==', moment().format('DD/MM/YYYY')) : selectedProject === 'INBOX' || selectedProject === 0 ? unsubscribe = unsubscribe.where('date', '==') : unsubscribe;\n    unsubscribe = unsubscribe.onSnapshot(snapshot => {\n      const newTasks = snapshot.docs.map(task => ({\n        id: task.id,\n        ...task.data()\n      }));\n      setTasks(selectedProject === 'NextWeek' ? newTasks.filter(task => moment(task.date, 'DD-MM-YYYY').diff(moment(), 'days') <= 7 && task.archived !== true) : newTasks.filter(task => task.archived !== true));\n      setArchivedTasks(newTasks.filter(task => task.archived !== false));\n    });\n    return () => unsubscribe();\n  }, [selectedProject]);\n  return {\n    tasks,\n    archivedTasks\n  };\n};\nexport const useProjects = () => {\n  const [projects, setProjects] = useState([]);\n  useEffect(() => {\n    firebase.firestore().collection('projects').where('userId', '==', 'ahmadnsaleh').orderBy('projectId').get().then(snapshot => {\n      const allProjects = snapshot.docs.map(project => ({ ...project.data(),\n        docId: project.id\n      }));\n\n      if (JSON.stringify(allProjects) !== JSON.stringify(projects)) {\n        setProjects(allProjects);\n      }\n    });\n  }, [projects]);\n  return {\n    projects,\n    setProjects\n  };\n};","map":{"version":3,"sources":["C:/Users/Ahmad Saleh/todois/src/hooks/index.js"],"names":["useState","useEffect","firebase","collatedTasksExist","moment","useTasks","selectedProject","tasks","setTasks","archivedTasks","setArchivedTasks","unsubscribe","firestore","collection","where","format","onSnapshot","snapshot","newTasks","docs","map","task","id","data","filter","date","diff","archived","useProjects","projects","setProjects","orderBy","get","then","allProjects","project","docId","JSON","stringify"],"mappings":"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","sourcesContent":["import {useState,useEffect} from 'react';\r\nimport {firebase} from '../firebase';\r\nimport {collatedTasksExist} from '../helpers';\r\nimport moment from 'moment';\r\n\r\nexport const useTasks = selectedProject =>{\r\n    const[tasks,setTasks]= useState([]);\r\n    const[archivedTasks,setArchivedTasks] =useState([]);\r\n\r\n    useEffect(() =>{\r\n\r\n        let unsubscribe = firebase\r\n        .firestore()\r\n        .collection('tasks')\r\n        .where('userId','==','ahmadsaleh');\r\n\r\n        unsubscribe=selectedProject && !collatedTasksExist(selectedProject) ?\r\n        (unsubscribe=unsubscribe.where('projectId','==',selectedProject))\r\n        : selectedProject === 'TODAY'\r\n        ?(unsubscribe=unsubscribe.where(\r\n        'date'\r\n        ,'=='\r\n        ,moment().format('DD/MM/YYYY')\r\n        )) \r\n        : selectedProject === 'INBOX' || selectedProject===0\r\n        ?(unsubscribe = unsubscribe.where('date','==',))\r\n        :unsubscribe;\r\n        unsubscribe =unsubscribe.onSnapshot(snapshot => {\r\n            const newTasks=snapshot.docs.map(task =>({\r\n                id: task.id,\r\n                ...task.data(),\r\n            }));\r\n            setTasks(\r\n                selectedProject === 'NextWeek'\r\n                ? newTasks.filter(\r\n                    task => moment(task.date , 'DD-MM-YYYY').diff(moment(),'days') <= 7 &&\r\n                    task.archived !==true\r\n                )\r\n                : newTasks.filter(task => task.archived !== true)\r\n            );\r\n            setArchivedTasks(newTasks.filter(task => task.archived !== false));\r\n        });\r\n        return () => unsubscribe();\r\n  }, [selectedProject]);\r\n\r\n  return { tasks, archivedTasks };\r\n};\r\n\r\nexport const useProjects = () => {\r\n  const [projects, setProjects] = useState([]);\r\n\r\n  useEffect(() => {\r\n    firebase\r\n      .firestore()\r\n      .collection('projects')\r\n      .where('userId', '==', 'ahmadnsaleh')\r\n      .orderBy('projectId')\r\n      .get()\r\n      .then(snapshot => {\r\n        const allProjects = snapshot.docs.map(project => ({\r\n          ...project.data(),\r\n          docId: project.id,\r\n        }));\r\n\r\n        if (JSON.stringify(allProjects) !== JSON.stringify(projects)) {\r\n          setProjects(allProjects);\r\n        }\r\n      });\r\n  }, [projects]);\r\n\r\n  return { projects, setProjects };\r\n};"]},"metadata":{},"sourceType":"module"}